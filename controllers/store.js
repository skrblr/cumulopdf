// Generated by CoffeeScript 1.6.3
(function() {
  var download, filename, filesizeinkb, fs, http, mongoose, root;

  mongoose = require('mongoose');

  http = require('http');

  fs = require('fs');

  root = __dirname + '/storage';

  exports.initstorage(function() {
    var error, stats;
    try {
      return stats = fs.lstatSync(root);
    } catch (_error) {
      error = _error;
      fs.mkdir(root, function(e) {});
      if (e) {
        return console.log(e);
      }
    }
  });

  exports.test = function(req, res) {
    return res.send('cumulopdf\n');
  };

  exports.login = function(req, res) {
    return res.send("you attempted to log in\n");
  };

  exports.retrieve = function(req, res) {
    if (req.params.recent != null) {
      return res.json({
        recent: req.params.recent,
        nothing: 'to see here'
      });
    } else {
      return res.json({
        nothing: 'to see here'
      });
    }
  };

  filename = function(url) {
    var error, f, res, rightNow, stats;
    f = url.split('/').pop();
    try {
      stats = fs.lstatSync(root + '/' + f);
      if (stats.isFile()) {
        rightNow = new Date();
        res = rightNow.toISOString().slice(0, 10).replace(/-/g, "");
        f = f.slice(0, -4) + '_' + res + '.pdf';
      }
    } catch (_error) {
      error = _error;
      console.log(error);
    }
    return f;
  };

  filesizeinkb = function(filename) {
    var size, stats;
    stats = fs.statSync(filename);
    size = stats["size"] / 1024;
    return size;
  };

  download = function(url, dest, cb) {
    var file, request;
    file = fs.createWriteStream(dest);
    return request = http.get(url, function(response) {
      response.pipe(file);
      return file.on('finish', function() {
        file.close;
        return cb;
      });
    });
  };

  exports.add = function(req, res) {
    var Resource, downloaded, fields, r, url;
    Resource = mongoose.model('Pdf');
    url = req.params.url;
    downloaded = 0;
    if (req.params.download != null) {
      download(url, filename(url, function() {
        return downloaded = 1;
      }));
    }
    fields = {
      title: "",
      url: url,
      stored: downloaded,
      filename: filename(url, {
        userid: 0
      }, size)
    };
    r = new Resource(fields);
    return r.save(function(err, resource) {
      if (err != null) {
        res.send(500, {
          error: err
        });
      }
      return res.send(resource);
    });
  };

}).call(this);
